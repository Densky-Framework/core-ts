// deno-lint-ignore-file
// .densky/http/feats/cookies/set/[name]/_middleware.ts
// THIS FILE WAS GENERATED BY DENSKY-BACKEND (by Apika Luca)
import * as $Densky$ from "densky";

import { HTTPError, StatusCode } from "densky";

const urlMatcherSerial_pathname = [
  { raw: "feats", isVar: false },
  { raw: "cookies", isVar: false },
  { raw: "set", isVar: false },
  { raw: "[name]", isVar: true, varname: "name" },
  { raw: "_middleware", isVar: false },
];

async function handler(
  req: $Densky$.HTTPRequest,
): Promise<$Densky$.HTTPPossibleResponse> {
  const urlMatcherPrepare_pathname = req.byParts;

  if (
    (() => {
      const t = urlMatcherPrepare_pathname;
      const p = urlMatcherSerial_pathname;
      const m = req.params;

      if (t.length !== p.length) return false;
      m.clear();
      return t.every((tp, i) => {
        if (!p[i]) return false;
        if (p[i].isVar) {
          m.set(p[i].varname, tp);
          return true;
        }
        if (p[i].raw === tp) return true;
        return false;
      });
    })()
  ) {
    await req.prepare();
    if (!req.url.searchParams.has("data")) {
      return new HTTPError(StatusCode.BAD_REQUEST, "Missing 'data' param");
    }

    let data: unknown = req.url.searchParams.get("data")!;

    if (req.url.searchParams.has("type")) {
      const type = req.url.searchParams.get("type")!;
      if (type === "json") {
        data = JSON.parse(data as string);
      }
    }

    req.data.set("data", data);
  }
}

export default handler;
