// deno-lint-ignore-file
// .densky/http/feats/cookies/set/[name]/_index.ts
// THIS FILE WAS GENERATED BY DENSKY-BACKEND (by Apika Luca)
import * as $Densky$ from "densky";
import { HTTPError, StatusCode } from "densky";
import $middle$0 from "./_middleware.ts";
import $child$0 from "./unsigned.ts";

const urlMatcherSerial_pathname = [
  { raw: "feats", isVar: false },
  { raw: "cookies", isVar: false },
  { raw: "set", isVar: false },
  { raw: "[name]", isVar: true, varname: "name" },
];

async function handler(
  req: $Densky$.HTTPRequest,
): Promise<$Densky$.HTTPPossibleResponse> {
  const urlMatcherPrepare_pathname = req.byParts;
  if (
    (() => {
      const t = urlMatcherPrepare_pathname;
      const p = urlMatcherSerial_pathname;

      if (t.length < p.length) return false;
      return p.every((tp, i) => {
        if (!t[i]) return false;
        if (tp.isVar) return true;
        if (tp.raw === t[i]) return true;
        return false;
      });
    })()
  ) {
    const out$0 = await $child$0(req);
    if (out$0) return out$0;

    if (
      (() => {
        const t = urlMatcherPrepare_pathname;
        const p = urlMatcherSerial_pathname;
        const m = req.params;

        if (t.length !== p.length) return false;
        m.clear();
        return t.every((tp, i) => {
          if (!p[i]) return false;
          if (p[i].isVar) {
            m.set(p[i].varname, tp);
            return true;
          }
          if (p[i].raw === tp) return true;
          return false;
        });
      })()
    ) {
      if (
        (() => {
          const t = urlMatcherPrepare_pathname;
          const p = urlMatcherSerial_pathname;
          const m = req.params;

          if (t.length !== p.length) return false;
          m.clear();
          return t.every((tp, i) => {
            if (!p[i]) return false;
            if (p[i].isVar) {
              m.set(p[i].varname, tp);
              return true;
            }
            if (p[i].raw === tp) return true;
            return false;
          });
        })()
      ) {
        await req.prepare();
        const $mid$0 = await $middle$0(req);
        if ($mid$0) return $mid$0;
        const data = req.data.get("data");

        if (!data) {
          return new HTTPError(StatusCode.BAD_REQUEST, "Expecting data");
        }

        await req.cookies.set(req.params.get("name")!, data, {
          path: "/",
          expires: new Date(Date.now() + 50000),
        });

        return new Response("OK", { status: StatusCode.OK });
      }
    }
  }
}

export default handler;
